// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HoverRequest {
    private @Nullable String actionId;
    public @Nullable String getActionId() { return actionId; }
    public void setActionId(@Nullable String setterArg) {
      this.actionId = setterArg;
    }

    private @Nullable Map<String, String> extraData;
    public @Nullable Map<String, String> getExtraData() { return extraData; }
    public void setExtraData(@Nullable Map<String, String> setterArg) {
      this.extraData = setterArg;
    }

    public static final class Builder {
      private @Nullable String actionId;
      public @NonNull Builder setActionId(@Nullable String setterArg) {
        this.actionId = setterArg;
        return this;
      }
      private @Nullable Map<String, String> extraData;
      public @NonNull Builder setExtraData(@Nullable Map<String, String> setterArg) {
        this.extraData = setterArg;
        return this;
      }
      public @NonNull HoverRequest build() {
        HoverRequest pigeonReturn = new HoverRequest();
        pigeonReturn.setActionId(actionId);
        pigeonReturn.setExtraData(extraData);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("actionId", actionId);
      toMapResult.put("extraData", extraData);
      return toMapResult;
    }
    static @NonNull HoverRequest fromMap(@NonNull Map<String, Object> map) {
      HoverRequest pigeonResult = new HoverRequest();
      Object actionId = map.get("actionId");
      pigeonResult.setActionId((String)actionId);
      Object extraData = map.get("extraData");
      pigeonResult.setExtraData((Map<String, String>)extraData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HoverResponse {
    private @Nullable Long responseCode;
    public @Nullable Long getResponseCode() { return responseCode; }
    public void setResponseCode(@Nullable Long setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable List<String> messages;
    public @Nullable List<String> getMessages() { return messages; }
    public void setMessages(@Nullable List<String> setterArg) {
      this.messages = setterArg;
    }

    public static final class Builder {
      private @Nullable Long responseCode;
      public @NonNull Builder setResponseCode(@Nullable Long setterArg) {
        this.responseCode = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      private @Nullable List<String> messages;
      public @NonNull Builder setMessages(@Nullable List<String> setterArg) {
        this.messages = setterArg;
        return this;
      }
      public @NonNull HoverResponse build() {
        HoverResponse pigeonReturn = new HoverResponse();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setMessages(messages);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("responseCode", responseCode);
      toMapResult.put("errorMessage", errorMessage);
      toMapResult.put("messages", messages);
      return toMapResult;
    }
    static @NonNull HoverResponse fromMap(@NonNull Map<String, Object> map) {
      HoverResponse pigeonResult = new HoverResponse();
      Object responseCode = map.get("responseCode");
      pigeonResult.setResponseCode((responseCode == null) ? null : ((responseCode instanceof Integer) ? (Integer)responseCode : (Long)responseCode));
      Object errorMessage = map.get("errorMessage");
      pigeonResult.setErrorMessage((String)errorMessage);
      Object messages = map.get("messages");
      pigeonResult.setMessages((List<String>)messages);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class HoverApiCodec extends StandardMessageCodec {
    public static final HoverApiCodec INSTANCE = new HoverApiCodec();
    private HoverApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return HoverRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return HoverResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HoverRequest) {
        stream.write(128);
        writeValue(stream, ((HoverRequest) value).toMap());
      } else 
      if (value instanceof HoverResponse) {
        stream.write(129);
        writeValue(stream, ((HoverResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HoverApi {
    void initiateRequest(@NonNull HoverRequest request, Result<HoverResponse> result);

    /** The codec used by HoverApi. */
    static MessageCodec<Object> getCodec() {
      return HoverApiCodec.INSTANCE;
    }

    /** Sets up an instance of `HoverApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HoverApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HoverApi.initiateRequest", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              HoverRequest requestArg = (HoverRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<HoverResponse> resultCallback = new Result<HoverResponse>() {
                public void success(HoverResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initiateRequest(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
